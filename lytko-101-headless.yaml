substitutions:
  devicename:        "lytko101-hl" # Host name, will be available as ${devicename}.local
  friendly_devicename:  "Bathroom" # UI visible name, will be added to all sensors and controls exposed to HA
  target_temperture_low:    "27.0" # Default low mark of the target temperature, can be changed from HA Thermostat GUI
  target_temperture_high:   "29.0" # Default high mark of the target temperature, can be changed from HA Thermostat GUI
                                   # Hysteresis is calculated as temperature_high - teplerature_low
                                   # Target temperature is calculated as the middle point between temperature_high and teplerature_low
                                   # Target temperture can be changed from Lytko screen
  # Compile time parameters
  min_temperature:           "5.0" # Minimal temperature in HA Thermostat GUI
  max_temperature:          "40.0" # Maximal temperature in HA Thermostat GUI
  temperature_step:          "0.5" # Temperature step in HA Thermostat GUI
  temperature_shift:         "0.0" # Constant shift (positive or negative) for the built in temperature sensor
  temperature_sensor:     int_ntc  # Name of a temperature sensor. int_ntc is a built-in NTC sensor. If you want to hookup
                                   # an external sensor using HA Sensor. See https://esphome.io/components/sensor/homeassistant.html
                                   # Example sensor can be found below in the 'sensor' section

  # NTC Thermistor Parameters, see thermistor manual for the detailed info
  ntc_beta_constant:        "3911" # NTC thermistor Beta coefficient
  ntc_ref_temperature:        "25" # Temperature when thermistor has the reference resistance, in C
  ntc_ref_resistance:      "10000" # Nominal / reference resistance of the attached thermistor in Ohms
  ntc_measurement_resistor: "2200" # Measurement resistor, board has 2.2kOhm resistor, if you add another 2.2kOms resistor as described
                                   # in the Lytko manual, it will have parallel connection to the board resistor, so
                                   # the value of 1100 should be put here. Calculate as parallely connected resistors in case another
                                   # nominal is used

  # Heating floor parameters
  floor_resistance:        "813.8" # Resistance of heating cable / matt in Ohm
  floor_mains_voltage:       "230" # Typical mains voltage of your system (better to use a value from smart meter via HA, see below

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://anatoly-savchenkov/lytko-configs/lytko-101-headless-v1.yaml@main
  import_full_config: true

esphome:
  name: ${devicename}
  name_add_mac_suffix: true

  platformio_options:
    board_build.f_cpu: 160000000L
  project:
    name: "Lytko.Thermostat-101-Headless-v1"
    version: "1.0"
  on_boot:
    priority: -100
    then:
      - lambda: |-
          id(boot_counter) += 1;

preferences:
  flash_write_interval: 1h

external_components:
#ESPHome 2022.12.0 + wifi.on_connect trigger
  - source:
      type: git
      url: https://github.com/ChemicalXandco/esphome
      ref: wifi-on-connected
    components: [ wifi ]

esp8266:
  board: nodemcuv2
  restore_from_flash: true
  board_flash_mode: dout
  early_pin_init: false

# Enable logging
logger:
  baud_rate: 74880
  level: VERBOSE

debug:
  update_interval: 5s

ota:
  on_error:
    - switch.turn_on: reboot

wifi:
  ap: {} # This spawns an AP with the device name and mac address with no password.

mdns:
  disabled: false

captive_portal:

# Enable Home Assistant API
api:
  # Set timeout to none, as device can be used standalone
  reboot_timeout: 0s

time:
  - platform: homeassistant

#mqtt:
#  broker: 192.168.0.101
#  username: mqtt_user
#  password: mqtt_password
#  discovery: true
#  discovery_prefix: lytko/homeassistant
#  reboot_timeout: 60s
#  keepalive: 15s
#  log_topic: lytko/logs

globals:
 - id: boot_counter
   type: int
   restore_value: yes
   initial_value: '0'

web_server:
  port: 80
  version: 2
  local: true

switch:
  - platform: gpio
    pin: GPIO15
    id: heater
    restore_mode: ALWAYS_OFF
    internal: true

  - platform: restart
    name: ${friendly_devicename} Restart
    id: reboot

  - platform: factory_reset
    name: ${friendly_devicename} Factory Reset
    id: reset

binary_sensor:
  - platform: status
    name: ${friendly_devicename} Status
    entity_category: diagnostic

text_sensor:
  - platform: template
    name: ${friendly_devicename} Uptime
    id: uptime_human
    icon: mdi:clock-start
    entity_category: diagnostic
    update_interval: never

sensor:
# Report basic device information like it's reboot counter, Wi-Fi signal strength and uptime
  - platform: uptime
    internal: true
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      - text_sensor.template.publish:
          id: uptime_human
          state: !lambda |-
            int seconds = round(id(uptime_sensor).raw_state);
            int days = seconds / (24 * 3600);
            seconds = seconds % (24 * 3600);
            int hours = seconds / 3600;
            seconds = seconds % 3600;
            int minutes = seconds /  60;
            seconds = seconds % 60;
            return (
              (days ? String(days) + "d " : "") +
              (hours ? String(hours) + "h " : "") +
              (minutes ? String(minutes) + "m" : "0m")
            ).c_str();


  - platform: template
    name: ${friendly_devicename} Boot Counter
    lambda: |-
      static int last_boot_counter = 0;
      if (last_boot_counter != id(boot_counter)) {
        last_boot_counter = id(boot_counter);
        return id(boot_counter);
      } else {
        return {};
      }
    update_interval: 60s
    state_class: total_increasing
    accuracy_decimals: 0
    entity_category: diagnostic

  - platform: wifi_signal
    name: ${friendly_devicename} WiFi Signal
    update_interval: 10s
    id: rssi_level
    entity_category: diagnostic
    filters:
      - delta: 1.0
    on_value:
      lambda: |-
        if (-1.0f > x && x >= -50.0f)       { id(rssi_level).set_icon("mdi:wifi-strength-4");}
        else if (-50.0f > x && x >= -61.0f) { id(rssi_level).set_icon("mdi:wifi-strength-3");}
        else if (-61.0f > x && x >= -72.0f) { id(rssi_level).set_icon("mdi:wifi-strength-2");}
        else if (-72.0f > x && x >= -83.0f) { id(rssi_level).set_icon("mdi:wifi-strength-1");}
        else if (-83.0f > x && x >= -94.0f) { id(rssi_level).set_icon("mdi:wifi-strength-outline");}
        else                                { id(rssi_level).set_icon("mdi:wifi-strength-off-outline");}

  - platform: debug
    free:
      id: free_heap
      internal: true
    fragmentation:
      id: heap_frag
      internal: true
    block:
      id: max_heap_block
      internal: true

  - platform: ntc
    sensor: resistance_sensor
    calibration:
      b_constant: ${ntc_beta_constant}
      reference_temperature: ${ntc_ref_temperature}°C
      reference_resistance: ${ntc_ref_resistance}Ohm
    name: ${friendly_devicename} Temperature
    accuracy_decimals: 1
    state_class: measurement
    device_class: temperature
    unit_of_measurement: "°C"
    id: int_ntc
    filters:
      - delta: 0.1 # Prevent repetitive actions using the same value
      - offset: ${temperature_shift}

  - platform: resistance
    id: resistance_sensor
    sensor: voltage_sensor
    configuration: UPSTREAM
    resistor: ${ntc_measurement_resistor}
    internal: true

  - platform: adc
    id: voltage_sensor
    pin: A0
    update_interval: 1s
    internal: true
    filters:
      - lambda: |-
          /* 10 bit ADC, readouts below 10 (1%) are considered noise, NTC is not connected */
          return (x < 10.0f/1024 ? NAN : x );
      - exponential_moving_average:
          alpha: 0.1
          send_every: 10
          send_first_at: 1

  - platform: template
    name: ${friendly_devicename} NTC Reference Resistance
    accuracy_decimals: 0
    unit_of_measurement: "Ω"
    entity_category: config
    update_interval: 60s
    icon: "mdi:flash"
    lambda: |-
      return ${ntc_ref_resistance};
    filters:
      - delta: 0.1 # Prevent repetitive actions using the same value

  - platform: template
    name: ${friendly_devicename} Heating Resistance
    accuracy_decimals: 1
    unit_of_measurement: "Ω"
    entity_category: config
    update_interval: 60s
    icon: "mdi:heat-wave"
    lambda: |-
      return ${floor_resistance};
    filters:
      - delta: 0.1 # Prevent repetitive actions using the same value

  - platform: template
    update_interval: 1s
    internal: true
    id: mains_voltage
    state_class: measurement
    device_class: voltage
    icon: "mdi:flash"
    lambda: |-
      return ${floor_mains_voltage};
    filters:
      - delta: 0.01 # Prevent repetitive actions using the same value

# If Smart Meter is available, uncomment the sensor below and comment out template sensor above
# Get current mains voltage from a smart meter
#  - platform: homeassistant
#    id: mains_voltage
#    entity_id: sensor.pzem_004t_v3_voltage
#    internal: true
#    filters:
#      - filter_out: nan
#      - delta: 0.01 # Prevent repetitive actions using the same value

  - platform: template
    update_interval: 1s
    internal: true
    name: ${friendly_devicename} Power
    id: floor_power
    state_class: measurement
    device_class: power
    accuracy_decimals: 0
    unit_of_measurement: "W"
    icon: "mdi:flash"
    lambda: |-
      return id(heater).state * id(mains_voltage).state * id(mains_voltage).state / (float)${floor_resistance};

  - platform: integration
    name: ${friendly_devicename} Energy
    sensor: floor_power
    time_unit: h
    integration_method: left
    restore: true
    accuracy_decimals: 3
    unit_of_measurement: "kWh"
    icon: "mdi:flash"
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.001 # Wh to kWh

output:
  - platform: esp8266_pwm
    pin:
      number: GPIO2
      inverted: true
    frequency: 1000 Hz
    id: pwm_output

light:
  - platform: monochromatic
    output: pwm_output
    restore_mode: ALWAYS_OFF
    id: blue_led
    internal: true

climate:
  - platform: bang_bang
    name: ${friendly_devicename} Heating Controller
    sensor: ${temperature_sensor}
    default_target_temperature_low: ${target_temperture_low} °C
    default_target_temperature_high: ${target_temperture_high} °C
    id: lytko_therm
    visual:
      min_temperature: ${min_temperature} °C
      max_temperature: ${max_temperature} °C
      temperature_step: ${temperature_step} °C

    heat_action:
      - switch.turn_on: heater
      - light.turn_on: blue_led

    idle_action:
      - switch.turn_off: heater
      - light.turn_off: blue_led
